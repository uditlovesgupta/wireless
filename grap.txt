/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>


#define MAX 5
#define INF 1e7

void printPath(int* p,int V,int src,int dst){
    if(dst==src)
    {
        printf("\n%d",dst);
        return;
    }
    printPath(p,V,src,p[dst]);
    printf(" %d",dst);
}

int getMin(int* d,int* visited,int V){
    int min=INF,minIndex=-1;
    for(int i=0;i<V;i++){
        if(!visited[i] && d[i]<min){
            min=d[i];
            minIndex=i;
        }
    }
    return minIndex;
}

void dijkstra(int** graph,int src,int V){
    int d[V];
    int pre[V];
    int visited[V];
    
    
    for(int i=0;i<V;i++){
        visited[i]=0;
        d[i]=INF;
        pre[i]=-1;
    }
    
    d[src]=0;
    for(int count=0;count<V-1;count++){
        int u=getMin(d,visited,V);
        visited[u]=true;
        for(int v=0;v<V;v++){
            if(!visited[v] && graph[u][v]!=0 && graph[u][v]+d[u]<d[v])
            {
                d[v]=d[u]+graph[u][v];
                pre[v]=u;
            }
        }
    }
    
    for(int i=0;i<V;i++)
    printPath(pre,V,0,i);
    
}

int main()
{
    int rows = 5;
    int cols = 5;

 
    int** graph = (int**)malloc(rows * sizeof(int*));
    for (int i = 0; i < rows; i++) {
        graph[i] = (int*)malloc(cols * sizeof(int));
    }

for(int i=0;i<5;i++)
for(int j=0;j<5;j++)
scanf("%d",&graph[i][j]);

for(int i=0;i<5;i++)
for(int j=0;j<5;j++)
printf("%d",graph[i][j]);

dijkstra(graph,0,4);



    return 0;
}








**************************







/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#define INF 1e7

void printPath(int* pre,int V,int src,int dst){
    if(src==dst)
    {
        printf("\n%d ",src);
        return;
    }
    printPath(pre,V,src,pre[dst]);
    printf("%d ",dst);
}

void floyd(int** graph,int V)
{
    
    int d[V][V];
    int pre[V][V];
    
    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            if(graph[i][j]==0 && i!=j)
            {
               d[i][j]=INF;  
               pre[i][j]=-1;
            }
           
            else
            {
                d[i][j]=graph[i][j];
                pre[i][j]=i;
            }
            
        }
    }
    
    
    
    
    for(int k=0;k<V;k++)
    {
        for(int i=0;i<V;i++)
        {
            for(int j=0;j<V;j++){
                if(d[i][k]!=INF && d[k][j]!=INF && d[i][k]+d[k][j]<d[i][j])
                {
                    d[i][j]=d[i][k]+d[k][j];
                    pre[i][j]=pre[k][j];
                }
            }
        }
    }
    
    
        for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
printf("%d ",d[i][j]);
            
        }
        printf("\n");
    }
    
    printPath(pre[2],V,2,0);
}





int main()
{
    printf("Hello World");
    int V = 5;

    // Define the adjacency matrix
    int** graph = (int**)malloc(V * sizeof(int*));
    for (int i = 0; i < V; i++) {
        graph[i] = (int*)malloc(V * sizeof(int));
    }

    // Initialize the adjacency matrix
    graph[0][0] = 0; graph[0][1] = 3; graph[0][2] = 8; graph[0][3] = INF; graph[0][4] = -4;
    graph[1][0] = INF; graph[1][1] = 0; graph[1][2] = INF; graph[1][3] = 1; graph[1][4] = 7;
    graph[2][0] = INF; graph[2][1] = 4; graph[2][2] = 0; graph[2][3] = INF; graph[2][4] = INF;
    graph[3][0] = 2; graph[3][1] = INF; graph[3][2] = -5; graph[3][3] = 0; graph[3][4] = INF;
    graph[4][0] = INF; graph[4][1] = INF; graph[4][2] = INF; graph[4][3] = 6; graph[4][4] = 0;

    printf("Original Graph:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (graph[i][j] == INF) {
                printf("INF ");
            } else {
                printf("%d ", graph[i][j]);
            }
        }
        printf("\n");
    }

    printf("\nShortest Distances:\n");
    floyd(graph, V);

    return 0;
}
